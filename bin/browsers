#!/usr/bin/env node

var path = require('path')
var fs = require('fs')

var commander = require('commander')
require('colorful').colorful()

var program = require('../lib/utils/program')
var browsers = require('../lib/browsers')

var pkgStr = fs.readFileSync(path.join(module.filename, '../../package.json'))
var pkg = JSON.parse(pkgStr)

function splitStr(val) {
    return val.split(',')
}

commander
  .version(pkg.version)
  .usage('[options]')

commander
  .option('-c, --capture [capture url]', '默认浏览器打开的地址: [capture]')
  .option('-p, --port [local port]', '本地服务默认端口号(9997): [port]')
  .option('--verbose', 'show debug log')
  .option('--browsers [browsers name]', '指定启动的浏览器, 默认 Chrome: [browsers]', splitStr)
  .option('--hub [s]', '指定主服务.: [http://10.15.52.87:9997]')
  .option('--manager [b]', '是否启动管理服务')


commander.on('--help', function() {
  console.log()
  console.log('  ' + 'Examples:'.to.bold.blue.color)
  console.log()
  console.log('   启动Chrome')
  console.log()
  console.log('   $ ' + 'browsers run --browsers=Chrome'.to.magenta.color)
  console.log()
  console.log('   For more information: ' + 'https://github.com/totorojs/browsers-launcher'.to.underline.color)
  console.log()
})

commander.parse(process.argv)


// 解析配置
var configPath = path.join(process.cwd(), 'browsers-config.json')
var config = {}
if (fs.existsSync(configPath)) {
  config = JSON.parse(fs.readFileSync(configPath) + '')
}

defaults(commander, config)

var defaultServerHost = '10.15.52.87'
var defaultServerPort = '9999'
var defaultClientPort = '9997'

var options = {
    port: commander.port || defaultClientPort,
    browsers: commander.browsers,
    timeout: 50000,
    capture: commander.capture || defaultServerHost + ':' + defaultServerPort,
    hub: commander.hub || defaultServerHost + ':' + defaultClientPort,
    manager: commander.manager,
    maxMemory: commander.maxMemory || 500
}

if (options.capture.indexOf('http') < 0) {
    options.capture = 'http://' + options.capture
}

if (options.hub && options.hub.indexOf('http') < 0) {
    options.hub = 'http://' + options.hub
}

function defaults(obj) {
    [].slice.call(arguments, 1).forEach(function(source) {
        for (var prop in source) {
            if (obj[prop] === void 0) {
                obj[prop] = source[prop]
            }
        }
    })
    return obj
}

browsers.run(options)
